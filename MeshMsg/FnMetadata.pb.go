// Code generated by protoc-gen-gogo.
// source: FnMetadata.proto
// DO NOT EDIT!

/*
	Package MeshMsg is a generated protocol buffer package.

	It is generated from these files:
		FnMetadata.proto
		WrapPubSub.proto
		WrapQueue.proto
		WrapX.proto

	It has these top-level messages:
		XMetadata
		FnMetadata
		WrapPubSub
		Uuid
		QueueMsg
		FnMSG
		XMSG
*/
package MeshMsg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type XMetadata struct {
	FnID string `protobuf:"bytes,1,opt,name=FnID,proto3" json:"FnID,omitempty"`
}

func (m *XMetadata) Reset()                    { *m = XMetadata{} }
func (m *XMetadata) String() string            { return proto.CompactTextString(m) }
func (*XMetadata) ProtoMessage()               {}
func (*XMetadata) Descriptor() ([]byte, []int) { return fileDescriptorFnMetadata, []int{0} }

func (m *XMetadata) GetFnID() string {
	if m != nil {
		return m.FnID
	}
	return ""
}

type FnMetadata struct {
	PeerID       string `protobuf:"bytes,1,opt,name=peerID,proto3" json:"peerID,omitempty"`
	Metadata     string `protobuf:"bytes,2,opt,name=Metadata,proto3" json:"Metadata,omitempty"`
	QueueClientN string `protobuf:"bytes,3,opt,name=QueueClientN,proto3" json:"QueueClientN,omitempty"`
	PubSubClient string `protobuf:"bytes,4,opt,name=PubSubClient,proto3" json:"PubSubClient,omitempty"`
}

func (m *FnMetadata) Reset()                    { *m = FnMetadata{} }
func (m *FnMetadata) String() string            { return proto.CompactTextString(m) }
func (*FnMetadata) ProtoMessage()               {}
func (*FnMetadata) Descriptor() ([]byte, []int) { return fileDescriptorFnMetadata, []int{1} }

func (m *FnMetadata) GetPeerID() string {
	if m != nil {
		return m.PeerID
	}
	return ""
}

func (m *FnMetadata) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

func (m *FnMetadata) GetQueueClientN() string {
	if m != nil {
		return m.QueueClientN
	}
	return ""
}

func (m *FnMetadata) GetPubSubClient() string {
	if m != nil {
		return m.PubSubClient
	}
	return ""
}

func init() {
	proto.RegisterType((*XMetadata)(nil), "MeshMsg.XMetadata")
	proto.RegisterType((*FnMetadata)(nil), "MeshMsg.FnMetadata")
}
func (m *XMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FnID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFnMetadata(dAtA, i, uint64(len(m.FnID)))
		i += copy(dAtA[i:], m.FnID)
	}
	return i, nil
}

func (m *FnMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FnMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PeerID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFnMetadata(dAtA, i, uint64(len(m.PeerID)))
		i += copy(dAtA[i:], m.PeerID)
	}
	if len(m.Metadata) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFnMetadata(dAtA, i, uint64(len(m.Metadata)))
		i += copy(dAtA[i:], m.Metadata)
	}
	if len(m.QueueClientN) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFnMetadata(dAtA, i, uint64(len(m.QueueClientN)))
		i += copy(dAtA[i:], m.QueueClientN)
	}
	if len(m.PubSubClient) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFnMetadata(dAtA, i, uint64(len(m.PubSubClient)))
		i += copy(dAtA[i:], m.PubSubClient)
	}
	return i, nil
}

func encodeFixed64FnMetadata(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32FnMetadata(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintFnMetadata(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *XMetadata) Size() (n int) {
	var l int
	_ = l
	l = len(m.FnID)
	if l > 0 {
		n += 1 + l + sovFnMetadata(uint64(l))
	}
	return n
}

func (m *FnMetadata) Size() (n int) {
	var l int
	_ = l
	l = len(m.PeerID)
	if l > 0 {
		n += 1 + l + sovFnMetadata(uint64(l))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovFnMetadata(uint64(l))
	}
	l = len(m.QueueClientN)
	if l > 0 {
		n += 1 + l + sovFnMetadata(uint64(l))
	}
	l = len(m.PubSubClient)
	if l > 0 {
		n += 1 + l + sovFnMetadata(uint64(l))
	}
	return n
}

func sovFnMetadata(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFnMetadata(x uint64) (n int) {
	return sovFnMetadata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *XMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFnMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FnID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFnMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFnMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FnID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFnMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFnMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FnMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFnMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FnMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FnMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFnMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFnMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFnMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFnMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueClientN", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFnMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFnMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueueClientN = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubSubClient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFnMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFnMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubSubClient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFnMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFnMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFnMetadata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFnMetadata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFnMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFnMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFnMetadata
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFnMetadata
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFnMetadata(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFnMetadata = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFnMetadata   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("FnMetadata.proto", fileDescriptorFnMetadata) }

var fileDescriptorFnMetadata = []byte{
	// 167 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x70, 0xcb, 0xf3, 0x4d,
	0x2d, 0x49, 0x4c, 0x49, 0x2c, 0x49, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xf7, 0x4d,
	0x2d, 0xce, 0xf0, 0x2d, 0x4e, 0x57, 0x92, 0xe7, 0xe2, 0x8c, 0x80, 0xc9, 0x09, 0x09, 0x71, 0xb1,
	0xb8, 0xe5, 0x79, 0xba, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x4a, 0x1d, 0x8c,
	0x5c, 0x5c, 0x08, 0xed, 0x42, 0x62, 0x5c, 0x6c, 0x05, 0xa9, 0xa9, 0x45, 0x70, 0x45, 0x50, 0x9e,
	0x90, 0x14, 0x17, 0x07, 0x4c, 0x8d, 0x04, 0x13, 0x58, 0x06, 0xce, 0x17, 0x52, 0xe2, 0xe2, 0x09,
	0x2c, 0x4d, 0x2d, 0x4d, 0x75, 0xce, 0xc9, 0x4c, 0xcd, 0x2b, 0xf1, 0x93, 0x60, 0x06, 0xcb, 0xa3,
	0x88, 0x81, 0xd4, 0x04, 0x94, 0x26, 0x05, 0x97, 0x26, 0x41, 0x04, 0x24, 0x58, 0x20, 0x6a, 0x90,
	0xc5, 0x9c, 0x04, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6,
	0x19, 0x8f, 0xe5, 0x18, 0x92, 0xd8, 0xc0, 0xbe, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xa0,
	0xd4, 0x0f, 0xfa, 0xe1, 0x00, 0x00, 0x00,
}
